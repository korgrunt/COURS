p =  6158149439419566673606274816975221142673996759349909176458330039054223768118760169980196136862718251012866922769742283906456943780591743821568632827338213
q =  8171848849399164652382486892544748390297006162093448287193382593727629579052070123977752799349024625490201935768314547751601588671737553151590125208972217
phi = (p-1)*(q-1)
N = p*q
e = 65537

d = power_mod(e, -1, phi)

print("Clé secrète: ", d)

c = 40409827470177502203282333959876086672997049801816612521556117755867772522864637636492131294630991072462984993078924534490278941490165194517308305319796973088581617959173027415276442886139158435405403518173499253907455278325197185133189832971505702165081391101717602665263571460760552506749266284402186987566

m = power_mod(c,d,N)

print("Message dechiffré: ", m)


############################################################################

p = 37
generatrices = []

for g in range(1, p):
    is_generatrice = True
    for k in range(1, p):
        result = power_mod(g, k, p)
        if result == 1 and k < (p-1):
            is_generatrice = False
            break
        elif result == 1 and k == (p-1):
            generatrices.append(g)
            break

print("Génératrices du groupe multiplicatif modulo 29 :", generatrices)


#################################################################################

N =  [127867147553337512578446875334889733922906036692542678821081406183613830632973545793176796132287484943527710240825980879501104613767416960593662560848609290302923015589358875504501784666343618794605250171034977440812142265524144978699532673, 457924560024198284051359426310678336523828849626062680373145604621821062533582431293592636471919772884606887452349643296311082910016190392345033184174861180620151621869723836887237618576084331696356624142460507703525051527418986935929033057, 2635348206904507714600336026618328590427154147044355268115635389372648152768519858382191624507678743710242101629218126194078589718511594071736538213616614512486932711757015139877635760699893472313929349260225260584621516074870685449516962567, 3210827043453712836933741816220059314359627458440960385313262077595982392890213760657393175022143786716289627838712484068506884492753934732396315523689291931098024584928381987699033267579669425506984821969362603712073343513827785436131909399, 3558932604110416890228988222454924776103862716759037276809184522348609243719928897477768175194622523495967309657641554444737552387601365493945465689716599074084635317658236635610228494436022506939233332017945617367418179474766783992414352833, 3070145537143091355129892497748228335382710646848968557562377239437519721160737851358040059564448491779393493056546989593949772456169807099257633638925856499517865680179678384395298123029886855296728034432301935033948971127515728358074744361, 2440140257555338073337111844452045983879212785834715948686252536221277535325808127043229121688102017971573594130657195762994597694354211005671769994139379016696827033004401315770086454575576987312183429478285622604205941184970724354675454447, 1627674747940159325571657390916030760188224653351874467064359899544401338735842276931862062372017438834774672872373623819465941993912002403418399037297506611000836566061748572762458669829836865600202695174853110583446174281475251747973219303]
for i in N:
    for j in N:
        denom = gcd(i,j)
        if denom != i and denom != j and denom != 1 :            
            print(i, " = ", i / denom, " x ", denom)


##################################################################
            



p =  1427247692705959881058285969449495136382746771
g =  2
y =  1410811049271124130799952504733245055548461139
m =  924251201480538706267073249481351874753546165
k =  288019511978434716088739439178974159347613551
r =  427689682526142154555236871024677616546096909
s =  [509741346258148808552016283098016030956866664]


from hashlib import sha256

hash_m = int.from_bytes(sha256(str(m).encode()).digest())

# Find q
f = factor(p-1)
qs = [q[0] for q in f if power_mod(g, (p-1)//q[0], p) != 1]
q = min(qs)
# Verify
for elem in s:
    a = Mod(hash_m//elem, q)
    b = Mod(r//elem, q)
    if Mod(g^a * y^b, q) == r:
        print(elem)